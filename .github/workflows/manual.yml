
name: "[Compute Platform] Integration Tests"
#Run tests for Compute platform after merge and as cron job
on:
  schedule: # Trigger for pluto_integration_tests
    - cron:  '*/2 * * * *'  #  --> Runs in schedule for integration tests
    - cron:  '*/3 * * * *'  #  --> Runs in schedule for autorecovery integration tests
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose the environment to run tests on (e.g., dev, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod
      test_suite:
        description: 'Specify which tests to run (e.g., on_demand, integration)'
        required: true
        default: 'Integration-Tests'
        type: choice
        options:
          - pluto_integration_tests
          - pluto_ondemand_tests
          - Autorecovery_integration_test


env:
  SECRET_GITHUB_ACCESS_TOKEN: ${{ secrets.GH_PAT }}
  TAG: ${{ github.ref_name }}
  ARTIFACTORY_UW2_USER: ${{ secrets.POC_ARTIFACTORY_UW2_USER }}
  ARTIFACTORY_UW2_API_TOKEN: ${{ secrets.POC_ARTIFACTORY_UW2_API_TOKEN }}
  PLUTO_E2E_TESTS_CLIENT_ID: ${{ secrets.PLUTO_E2E_TESTS_CLIENT_ID }}
  PLUTO_E2E_TESTS_CLIENT_SECRET: ${{ secrets.PLUTO_E2E_TESTS_CLIENT_SECRET }}
  TMPDIR: "/mnt/localssd/colligo_cache/tmp"
  PIP_CACHE_DIR: "/mnt/localssd/colligo_cache/pip_cache"
  UV_CACHE_DIR: "/mnt/localssd/colligo_cache/uv_cache"
  COLLIGO_MODEL_CACHE_DIR: "/mnt/localssd/colligo_cache"
  ACTIONS_STEP_DEBUG: true
  UV_LINK_MODE: "symlink"
  SLACK_WEBHOOK_URL : "https://hooks.slack.com/services/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"


jobs:

  setup:
    if: (github.event.inputs.environment=='dev' && github.event.inputs.test_suite=='pluto_integration_tests')
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.step1.outputs.runner }}
    steps:
      - name: Set-up-runners
        id: step1
        run: |
          if [ ${{ github.event.inputs.environment }} == 'prod' ]; then
            echo "runner=macos-latest" >> $GITHUB_OUTPUT
          else
            echo "runner=ubuntu-latest" >> $GITHUB_OUTPUT
          fi

  Tests: # Workflow for Manual Tests
    needs: [setup]
    name: 'Tests'
    if: github.event_name == 'workflow_dispatch' &&  (github.event.inputs.environment=='dev' && github.event.inputs.test_suite=='pluto_integration_tests')
    runs-on: ${{ needs.setup.outputs.runner }}
    steps:
      - name: Run tests
        run: |
          echo "mannual success"
      - name: Send notification to Slack on failure
        if: ${{ failure() }}
        run: |
    
          echo "Notification sent"
  scedule_tests: #Workflow for schedule
    name: 'Schedule Run Tests'
    if: github.event_name == 'schedule'
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        environment: [dev,stage,prod]
        include:
          - environment: dev
            runner: ubuntu-latest
          - environment: stage
            runner: ubuntu-latest
          - environment: prod
            runner: macos-latest
        test_type: [integration-test, decision-trees-test]
        exclude:
          - environment: dev
            test_type: decision-trees-test
      fail-fast: false
      max-parallel: 1
    steps:
      - name: Run tests
        run: |
          PLUTO_ENV=${{ matrix.environment }}
          TEST_SUITES=${{ matrix.test_type }}
          echo "Running on runner ${{matrix.environment.runner}}"
          if [ "${{ github.event.schedule }}" == "*/2 * * * *" && ${ TEST_SUITES }" == "integration-test" ]; then
            echo "Running integration tests on ${{ matrix.env }}..."
            echo "running success "
          elif [ "${{ github.event.schedule }}" == "*/3 * * * *" &&  ${{ matrix.test_type }}" == "decision-trees-test" ]; then
            echo "Running decision trees tests on ${{ matrix.env }}..."
            echo "running success "
          else
            EXIT_CODE=true
            echo "EXIT_CODE=$EXIT_CODE" >> $GITHUB_ENV
            echo "Schedule skipped for ${TEST_SUITES} on ${PLUTO_ENV} due to cron ${{ github.event.schedule }}"
            exit 0
          fi
    
      - name: Send notification to Slack on failure
        if: ${{ failure() }}
        run: |
          echo "notification sent"
